# -*- coding: utf-8 -*-
"""Projeto Data Science - Petróleo

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FTx5ZaFaK5u3sUngSMnJAgeLbfzOy1Co

# **Dataset Produção de Petróleo**





---

# *Business Understanding*

**Entender e delimitar o problema**

A pandemia causou impactos sociais, econômicos, culturais e políticos. No Brasil um dos setores afetados foi a de produção de petróleo.

# Há mais ou menos 20 anos, o petróleo Brasileiro era majoritariamente oriundo de importações, mas agora o Brasil é autossuficiente do produto.
Segundo dados da Petrobras o Brasil produz diariamente mais de 2 milhões de barris de petróleo, nos colocando no 17° lugar do ranking mundial de e em 2° lugar na américa latina, atrás apenas da Venezuela.

A produção de Petróleo no Brasil é realizada em nove bacias petrolíferas, das quais quatro merecem destaque: as bacias de Campos, de Santos, do Espírito Santo e do Recôncavo Baiano.

1. Bacia de Campos: A Bacia de Campos é a maior e principal bacia petrolífera brasileira. Localizada na região que se estende por todo o litoral do Espírito Santo até o norte do Rio de Janeiro, e é responsável por 80% da produção de petróleo no Brasil. Essa bacia contribui com cerca de R$54 milhões de reais por ano para o Produto Interno Bruto (PIB) do país.

2. Bacia de Santos: É a bacia petrolífera com maior potencial de crescimento do Brasil. É nela que se encontra a camada pré-sal recentemente descoberta e explorada a partir de 2012. Sua localização se estende desde o litoral sul do estado do Rio de Janeiro até o norte do estado de Santa Catarina.

3. Bacia do Espírito Santo: Está localizada próxima às porções central e norte do estado do Espírito Santo e ao litoral sul da Bahia. Essa bacia destaca-se menos pela produção de petróleo e mais pela extração de gás natural e óleo.

4. Bacia do Recôncavo Baiano: É a segunda bacia petrolífera brasileira em volume de produção e a primeira a ser explorada no Brasil (desde a década de 1950). Localiza-se ao longo do estado da Bahia.

**Obejtivo do Projeto**

Construir um modelo usando os dados obtidos no dataset para responder às seguintes perguntas: "A produção de barris de petróleo em 2020 no Brasil foi afetada pela quarentena? Se sim, qual foi o resultado dessa interferência?".

# *Data Understanding*
"""

#ENTENDENDO OS DADOS
# Importando as bibliotecas necessárias
import pandas as pd
import plotly.offline as py
import plotly.graph_objs as go

py.init_notebook_mode(connected=False)

# Permitir visualizar todas as colunas
pd.options.display.max_columns = None

# Renderizar os gráficos diretamento no notebook
# %matplotlib inline

# Devido o Plotly estar sendo utilizado no Google Collab, precisaremos definir
# a função abaixo e chamá-la sempre que quisermos exibir um gráfico

def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-1.5.1.min.js?noext',
            },
          });
        </script>
        '''))

#ENTENDENDO OS DADOS
# Lendo o arquivo CSV 
antigo = pd.read_csv('9719.csv', sep=';', encoding='latin-1') #1997-2019
novo = pd.read_csv('2020.csv', sep=';', encoding='latin-1') #2020

# Verificando as dimensões do DataFrame
print("Variáveis:\t{}\nEntradas:\t{}".format(antigo.shape[1], antigo.shape[0]))

print('\n')

print("Variáveis:\t{}\nEntradas:\t{}".format(novo.shape[1], novo.shape[0]))

# Ver as 5 primeiras entradas do conjunto 2020
display(novo.head())

"""**Entendendo os atributos**
* **Produto:** Terra e mar;
* **Unidade:** Indica Unidade de Medida (metro cúbico -m3, barris- b e barris equivalentes de petróleo - bep);
* **Ano:** Ano de produção (1997 - 2020);
* **Região:** Região do Brasil;
* **Estado:** Estado da Região;
* **JAN:** Total produzido no mês de janeiro;
* **FEV:** Total produzido no mês de fevereiro;
* **MAR:** Total produzido no mês de março;
* **ABR:** Total produzido no mês de abril;
* **MAIO:** Total produzido no mês de maio;
* **JUN:** Total produzido no mês de junho;
* **JUL:** Total produzido no mês de julho;
* **AGO:** Total produzido no mês de agosto;
* **SET:** Total produzido no mês de setembro;
* **OUT:** Total produzido no mês de outubro;
* **NOV:** Total produzido no mês de novembro;
* **DEZ:** Total produzido no mês de dezembro;
* **Total:** Total do ano, soma dos meses.

## *Data Preparation*

>  *Conjunto que contém os dados de 2020*
"""

#PREPARAÇÃO DOS DADOS
# Porcentagem de valores faltantes no conjunto 2020
(novo.isnull().sum() / novo.shape[0]).sort_values(ascending=False)

#PREPARAÇÃO DOS DADOS
# Convertendo todas as colunas do conjunto de 2020 object para float

novo['JAN'] = novo['JAN'].apply(lambda x:str(x).replace(",","."))
novo['JAN'] = novo['JAN'].astype('float64')

novo['FEV'] = novo['FEV'].apply(lambda x:str(x).replace(",","."))
novo['FEV'] = novo['FEV'].astype('float64')

novo['MAR'] = novo['MAR'].apply(lambda x:str(x).replace(",","."))
novo['MAR'] = novo['MAR'].astype('float64')

novo['ABR'] = novo['ABR'].apply(lambda x:str(x).replace(",","."))
novo['ABR'] = novo['ABR'].astype('float64')

novo['MAI'] = novo['MAI'].apply(lambda x:str(x).replace(",","."))
novo['MAI'] = novo['MAI'].astype('float64')

novo['JUN'] = novo['JUN'].apply(lambda x:str(x).replace(",","."))
novo['JUN'] = novo['JUN'].astype('float64')

novo['JUL'] = novo['JUL'].apply(lambda x:str(x).replace(",","."))
novo['JUL'] = novo['JUL'].astype('float64')

novo['AGO'] = novo['AGO'].apply(lambda x:str(x).replace(",","."))
novo['AGO'] = novo['AGO'].astype('float64')

novo['SET'] = novo['SET'].apply(lambda x:str(x).replace(",","."))
novo['SET'] = novo['SET'].astype('float64')

novo['OUT'] = novo['OUT'].apply(lambda x:str(x).replace(",","."))
novo['OUT'] = novo['OUT'].astype('float64')

novo['NOV'] = novo['NOV'].apply(lambda x:str(x).replace(",","."))
novo['NOV'] = novo['NOV'].astype('float64')

novo['DEZ'] = novo['DEZ'].apply(lambda x:str(x).replace(",","."))
novo['DEZ'] = novo['DEZ'].astype('float64')

novo['TOTAL'] = novo['TOTAL'].apply(lambda x: str(x).replace(",","."))
novo['TOTAL'] = novo['TOTAL'].astype('float64')

#PREPARAÇÃO DOS DADOS
# Identificando o tipo de cada variável do conjunto 2020
display(novo.dtypes)

"""## *Modeling*

> *Conjunto que contém os dados de 2020*


"""

#MODELAGEM

# Analisando a produção de petróleo por barril em 2020 por estado
pd.set_option('display.max_rows', None)
novo[['ESTADO', 'TOTAL']].groupby(['ESTADO']).sum()

# Gerando um gráfico com a produção de cada mês no ano de 2020
configure_plotly_browser_state()
trace = go.Bar(x = ['ALAGOAS', 'AMAZONAS', 'BAHIA', 'CEARÁ', 'ESPÍRITO SANTO', 'MARANHÃO', 'PARANÁ', 'RIO DE JANEIRO', 'RIO GRANDE DO NORTE', 'SERGIPE', 'SÃO PAULO'],
                y = [6.413334e+05, 3.905361e+06, 6.272687e+06, 4.973696e+05, 6.127324e+07, 1.152067e+04, 0.000000e+00, 5.788128e+08, 8.435643e+06, 6.944563e+07,
3.276776e+06])

data = [trace]
py.iplot(data)

"""## *Evaluation*

> Conjunto que contém os dados de 2020
"""

# EVALUATION
# Somando todos os valores da produção total de 2020
total2020 = sum(novo['TOTAL'])
total2020

"""## *Data Preparation*

> Conjunto que contém os dados de 1997 até 2019


"""

#PREPARAÇÃO DOS DADOS
# Porcentagem de valores faltantes no conjunto 97-19
(antigo.isnull().sum() / antigo.shape[0]).sort_values(ascending=False)

#PREPARAÇÃO DOS DADOS

# Convertendo as colunas nececssarias do conjunto 97-19 de object para float
antigo['JAN'] = antigo['JAN'].apply(lambda x:str(x).replace(",","."))
antigo['JAN'] = antigo['JAN'].astype('float64')

antigo['FEV'] = antigo['FEV'].apply(lambda x:str(x).replace(",","."))
antigo['FEV'] = antigo['FEV'].astype('float64')

antigo['MAR'] = antigo['MAR'].apply(lambda x:str(x).replace(",","."))
antigo['MAR'] = antigo['MAR'].astype('float64')

antigo['ABR'] = antigo['ABR'].apply(lambda x:str(x).replace(",","."))
antigo['ABR'] = antigo['ABR'].astype('float64')

antigo['MAI'] = antigo['MAI'].apply(lambda x:str(x).replace(",","."))
antigo['MAI'] = antigo['MAI'].astype('float64')

antigo['JUN'] = antigo['JUN'].apply(lambda x:str(x).replace(",","."))
antigo['JUN'] = antigo['JUN'].astype('float64')

antigo['JUL'] = antigo['JUL'].apply(lambda x:str(x).replace(",","."))
antigo['JUL'] = antigo['JUL'].astype('float64')

antigo['AGO'] = antigo['AGO'].apply(lambda x:str(x).replace(",","."))
antigo['AGO'] = antigo['AGO'].astype('float64')

antigo['SET'] = antigo['SET'].apply(lambda x:str(x).replace(",","."))
antigo['SET'] = antigo['SET'].astype('float64')

antigo['OUT'] = antigo['OUT'].apply(lambda x:str(x).replace(",","."))
antigo['OUT'] = antigo['OUT'].astype('float64')

antigo['NOV'] = antigo['NOV'].apply(lambda x:str(x).replace(",","."))
antigo['NOV'] = antigo['NOV'].astype('float64')

antigo['DEZ'] = antigo['DEZ'].apply(lambda x:str(x).replace(",","."))
antigo['DEZ'] = antigo['DEZ'].astype('float64')

antigo['TOTAL'] = antigo['TOTAL'].apply(lambda x:str(x).replace(",","."))
antigo['TOTAL'] = antigo['TOTAL'].astype('float64')

display(antigo.dtypes)

# PREPARAÇÃO DE DADOS
# Verificando as 5 últimas linhas do conjunto 97-19 para ter uma noção da produção do ano anterior
antigo[-5:]

"""## *Modeling*

> Conjunto que contém os dados de 1997 até 2019


"""

#MODELING
# Analisando a produção de petróleo por barril em 97-19 por estado
pd.set_option('display.max_rows', None)
antigo[['ESTADO', 'TOTAL']].groupby(['ESTADO']).sum()

# Gerando um gráfico com a produção total dos 3 estados com maior produção no período 2014-2019
configure_plotly_browser_state()
trace = go.Bar(x = ['ESPIRITO SANTO', 'RIO DE JANEIRO', 'SÃO PAULO'],
                y = [784858366.511, 3854410414.3, 595747260.74], )

data = [trace]
py.iplot(data)

#MODELAGEM 
# Dropando as colunas que contém dados no dataset 97-19 e estão vazias no dataset 2020 para que a comparação seja no mesmo período de tempo (jan-ago)
antigo = antigo.drop(['SET'], axis=1)
antigo = antigo.drop(['OUT'], axis=1)
antigo = antigo.drop(['NOV'], axis=1)
antigo = antigo.drop(['DEZ'], axis=1)

"""## *Evaluation*

> Conjunto que contém os dados de 1997 até 2019


"""

# EVALUATION
# Verificando a produção total de petróleo em cada ano
pd.set_option('display.max_rows', None)
antigo[['ANO','TOTAL']].groupby(['ANO']).sum()

"""# *Deployment*"""

configure_plotly_browser_state()
trace = go.Bar(x = ['1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', 
                     '2013','2014', '2015', '2016', '2017', '2018', '2019', '2020'],
                y = [3.059823e+08, 3.546544e+08, 4.007721e+08, 4.506252e+08, 4.718613e+08, 5.308535e+08, 5.460794e+08, 5.407160e+08, 5.962534e+08, 6.287962e+08,
6.380171e+08, 6.632741e+08, 7.118815e+08, 7.499524e+08, 7.684693e+08, 7.544072e+08, 7.387131e+08, 8.229280e+08, 8.896656e+08, 9.187310e+08, 9.569277e+08, 9.441174e+08,
1.017531e+09, 7.325723e+08])

data = [trace]
py.iplot(data)

"""Com os dados obtidos é possível chegar a conclusão de que sim, a pandemia afetou a produção do petróleo neste ano.

O total de petróleo produzido até agosto de 2020 é de 732.572.392 de barris, quase 300 milhões de barris a menos que o ano anterior, e essa é quase a mesma quantidade produzida nos anos de 2009 e 2010 no mesmo período de tempo (JAN-AGO), onde em 2009 tivemos 711 milhões de barris e em 2010 749 milhões.

De 2002 a 2004 tivemos a epidemia do SARS (síndrome respiratória aguda grave), e podemos observar que a produção de petróleo no período jan-ago estagnou.

Talvez seja apenas coincidência, mas a produção jan-ago de 2020 está entre a produção no mesmo período de 2009-2010, que foi o ano em que o Brasil enfrentou a epidemia do H1N1.

Temos também o exemplo de 2015, a epidemia do zika virus, em que o crescimento da produção de 2015 para 2016 também foi de apenas 30 milhões no período de tempo jan-ago.
"""